// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: junimohost/servermanager/v1/servermanager.proto

package servermanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerManagerServiceClient is the client API for ServerManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerManagerServiceClient interface {
	GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*UpdateServerResponse, error)
	CreateGameConfig(ctx context.Context, in *CreateGameConfigRequest, opts ...grpc.CallOption) (*CreateGameConfigResponse, error)
	GetBackups(ctx context.Context, in *GetBackupsRequest, opts ...grpc.CallOption) (*GetBackupsResponse, error)
	RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error)
	StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error)
	StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error)
	RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error)
	GetAvailableMods(ctx context.Context, in *GetAvailableModsRequest, opts ...grpc.CallOption) (*GetAvailableModsResponse, error)
	GetServerMods(ctx context.Context, in *GetServerModsRequest, opts ...grpc.CallOption) (*GetServerModsResponse, error)
	GetSharePage(ctx context.Context, in *GetSharePageRequest, opts ...grpc.CallOption) (*GetSharePageResponse, error)
}

type serverManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerManagerServiceClient(cc grpc.ClientConnInterface) ServerManagerServiceClient {
	return &serverManagerServiceClient{cc}
}

func (c *serverManagerServiceClient) GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error) {
	out := new(GetServersResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*UpdateServerResponse, error) {
	out := new(UpdateServerResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) CreateGameConfig(ctx context.Context, in *CreateGameConfigRequest, opts ...grpc.CallOption) (*CreateGameConfigResponse, error) {
	out := new(CreateGameConfigResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/CreateGameConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetBackups(ctx context.Context, in *GetBackupsRequest, opts ...grpc.CallOption) (*GetBackupsResponse, error) {
	out := new(GetBackupsResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/GetBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error) {
	out := new(RestoreBackupResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/RestoreBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error) {
	out := new(StopServerResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error) {
	out := new(StartServerResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/StartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error) {
	out := new(RestartServerResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/RestartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetAvailableMods(ctx context.Context, in *GetAvailableModsRequest, opts ...grpc.CallOption) (*GetAvailableModsResponse, error) {
	out := new(GetAvailableModsResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/GetAvailableMods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetServerMods(ctx context.Context, in *GetServerModsRequest, opts ...grpc.CallOption) (*GetServerModsResponse, error) {
	out := new(GetServerModsResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/GetServerMods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetSharePage(ctx context.Context, in *GetSharePageRequest, opts ...grpc.CallOption) (*GetSharePageResponse, error) {
	out := new(GetSharePageResponse)
	err := c.cc.Invoke(ctx, "/junimohost.servermanager.v1.ServerManagerService/GetSharePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerManagerServiceServer is the server API for ServerManagerService service.
// All implementations must embed UnimplementedServerManagerServiceServer
// for forward compatibility
type ServerManagerServiceServer interface {
	GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*UpdateServerResponse, error)
	CreateGameConfig(context.Context, *CreateGameConfigRequest) (*CreateGameConfigResponse, error)
	GetBackups(context.Context, *GetBackupsRequest) (*GetBackupsResponse, error)
	RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error)
	StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error)
	StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error)
	RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error)
	GetAvailableMods(context.Context, *GetAvailableModsRequest) (*GetAvailableModsResponse, error)
	GetServerMods(context.Context, *GetServerModsRequest) (*GetServerModsResponse, error)
	GetSharePage(context.Context, *GetSharePageRequest) (*GetSharePageResponse, error)
	mustEmbedUnimplementedServerManagerServiceServer()
}

// UnimplementedServerManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerManagerServiceServer struct {
}

func (UnimplementedServerManagerServiceServer) GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (UnimplementedServerManagerServiceServer) UpdateServer(context.Context, *UpdateServerRequest) (*UpdateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedServerManagerServiceServer) CreateGameConfig(context.Context, *CreateGameConfigRequest) (*CreateGameConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameConfig not implemented")
}
func (UnimplementedServerManagerServiceServer) GetBackups(context.Context, *GetBackupsRequest) (*GetBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackups not implemented")
}
func (UnimplementedServerManagerServiceServer) RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackup not implemented")
}
func (UnimplementedServerManagerServiceServer) StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedServerManagerServiceServer) StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedServerManagerServiceServer) RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (UnimplementedServerManagerServiceServer) GetAvailableMods(context.Context, *GetAvailableModsRequest) (*GetAvailableModsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableMods not implemented")
}
func (UnimplementedServerManagerServiceServer) GetServerMods(context.Context, *GetServerModsRequest) (*GetServerModsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMods not implemented")
}
func (UnimplementedServerManagerServiceServer) GetSharePage(context.Context, *GetSharePageRequest) (*GetSharePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharePage not implemented")
}
func (UnimplementedServerManagerServiceServer) mustEmbedUnimplementedServerManagerServiceServer() {}

// UnsafeServerManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerManagerServiceServer will
// result in compilation errors.
type UnsafeServerManagerServiceServer interface {
	mustEmbedUnimplementedServerManagerServiceServer()
}

func RegisterServerManagerServiceServer(s grpc.ServiceRegistrar, srv ServerManagerServiceServer) {
	s.RegisterService(&ServerManagerService_ServiceDesc, srv)
}

func _ServerManagerService_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServers(ctx, req.(*GetServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_CreateGameConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).CreateGameConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/CreateGameConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).CreateGameConfig(ctx, req.(*CreateGameConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/GetBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetBackups(ctx, req.(*GetBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_RestoreBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).RestoreBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/RestoreBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).RestoreBackup(ctx, req.(*RestoreBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).StopServer(ctx, req.(*StopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/StartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).StartServer(ctx, req.(*StartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/RestartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).RestartServer(ctx, req.(*RestartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetAvailableMods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableModsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetAvailableMods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/GetAvailableMods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetAvailableMods(ctx, req.(*GetAvailableModsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetServerMods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerModsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServerMods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/GetServerMods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServerMods(ctx, req.(*GetServerModsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetSharePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetSharePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.servermanager.v1.ServerManagerService/GetSharePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetSharePage(ctx, req.(*GetSharePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerManagerService_ServiceDesc is the grpc.ServiceDesc for ServerManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "junimohost.servermanager.v1.ServerManagerService",
	HandlerType: (*ServerManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _ServerManagerService_GetServers_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _ServerManagerService_UpdateServer_Handler,
		},
		{
			MethodName: "CreateGameConfig",
			Handler:    _ServerManagerService_CreateGameConfig_Handler,
		},
		{
			MethodName: "GetBackups",
			Handler:    _ServerManagerService_GetBackups_Handler,
		},
		{
			MethodName: "RestoreBackup",
			Handler:    _ServerManagerService_RestoreBackup_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _ServerManagerService_StopServer_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _ServerManagerService_StartServer_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _ServerManagerService_RestartServer_Handler,
		},
		{
			MethodName: "GetAvailableMods",
			Handler:    _ServerManagerService_GetAvailableMods_Handler,
		},
		{
			MethodName: "GetServerMods",
			Handler:    _ServerManagerService_GetServerMods_Handler,
		},
		{
			MethodName: "GetSharePage",
			Handler:    _ServerManagerService_GetSharePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junimohost/servermanager/v1/servermanager.proto",
}
